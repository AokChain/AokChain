// Copyright (c) 2014-2016 The BlackCoin developers
// Copyright (c) 2012-2013 The PPCoin developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <pos.h>

#include <txdb.h>
#include <validation.h>
#include <arith_uint256.h>
#include <hash.h>
#include <timedata.h>
#include <chainparams.h>
#include <script/sign.h>
#include <consensus/consensus.h>

using namespace std;

// Stake Modifier (hash modifier of proof-of-stake):
// The purpose of stake modifier is to prevent a txout (coin) owner from
// computing future proof-of-stake generated by this txout at the time
// of transaction confirmation. To meet kernel protocol, the txout
// must hash with a future stake modifier to generate the proof.
uint256 ComputeStakeModifier(const CBlockIndex* pindexPrev, const uint256& kernel)
{
    if (!pindexPrev) {
        return uint256();  // genesis block's modifier is 0
    }

    CDataStream ss(SER_GETHASH, 0);
    ss << kernel << pindexPrev->nStakeModifier;
    return Hash(ss.begin(), ss.end());
}

// BlackCoin kernel protocol v3
// coinstake must meet hash target according to the protocol:
// kernel (input 0) must meet the formula
//     hash(nStakeModifier + txPrev.nTime + txPrev.vout.hash + txPrev.vout.n + nTime) < bnTarget * nWeight
// this ensures that the chance of getting a coinstake is proportional to the
// amount of coins one owns.
// The reason this hash is chosen is the following:
//   nStakeModifier: scrambles computation to make it very difficult to precompute
//                   future proof-of-stake
//   txPrev.nTime: slightly scrambles computation
//   txPrev.vout.hash: hash of txPrev, to reduce the chance of nodes
//                     generating coinstake at the same time
//   txPrev.vout.n: output number of txPrev, to reduce the chance of nodes
//                  generating coinstake at the same time
//   nTime: current timestamp
//   block/tx hash should not be used here as they can be generated in vast
//   quantities so as to generate blocks faster, degrading the system back into
//   a proof-of-work situation.
//
bool CheckStakeKernelHash(const CBlockIndex* pindexPrev, unsigned int nBits, CAmount nValueIn, const COutPoint& prevout, unsigned int nTimeTx, unsigned int nTimeTxPoS)
{
    if (!pindexPrev)
        return false;

    if (nValueIn == 0)
        return false;

    // Base target
    arith_uint256 bnTarget;
    bnTarget.SetCompact(nBits);

    // Calculate hash
    CHashWriter ss(SER_GETHASH, 0);
    ss << pindexPrev->nStakeModifier << nTimeTxPoS << prevout.hash << prevout.n << nTimeTx;
    uint256 hashProofOfStake = ss.GetHash();

    return (UintToArith256(hashProofOfStake) / nValueIn) <= bnTarget;
}

// Check whether the coinstake timestamp meets protocol
bool CheckCoinStakeTimestamp(int64_t nTimeBlock, int64_t nTimeTx)
{
    return (nTimeBlock == nTimeTx);
}

// Simplified version of CheckCoinStakeTimestamp() to check header-only timestamp
bool CheckStakeBlockTimestamp(int64_t nTimeBlock)
{
   return CheckCoinStakeTimestamp(nTimeBlock, nTimeBlock);
}

bool CheckKernel(CBlockIndex* pindexPrev, unsigned int nBits, uint32_t nTimeBlock, const COutPoint& prevout, CCoinsViewCache& view)
{
    std::map<COutPoint, CStakeCache> tmp;
    return CheckKernel(pindexPrev, nBits, nTimeBlock, prevout, view, tmp);
}

bool CheckKernel(CBlockIndex* pindexPrev, unsigned int nBits, uint32_t nTimeBlock, const COutPoint& prevout, CCoinsViewCache& view, const std::map<COutPoint, CStakeCache>& cache)
{
    if (!pindexPrev)
        return false;

    auto it = cache.find(prevout);

    if (it == cache.end()) {
        // not found in cache (shouldn't happen during staking, only during verification which does not use cache)
        Coin coinPrev;
        if (!view.GetCoin(prevout, coinPrev)) {
            return false;
        }

        if (pindexPrev->nHeight + 1 - coinPrev.nHeight < COINSTAKE_MATURITY) {
            return false;
        }

        CBlockIndex* blockFrom = pindexPrev->GetAncestor(coinPrev.nHeight);
        if(!blockFrom) {
            return false;
        }
        
        if(coinPrev.IsSpent()){
            return false;
        }

        return CheckStakeKernelHash(pindexPrev, nBits, coinPrev.out.nValue, prevout,
                                    nTimeBlock, coinPrev.nTime);
    } else {
        Coin coinPrev;
        if(!view.GetCoin(prevout, coinPrev)){
            return false;
        }

        // found in cache
        const CStakeCache& stake = it->second;
        if (CheckStakeKernelHash(pindexPrev, nBits, stake.amount, prevout,
                                    nTimeBlock, coinPrev.nTime)) {
            // Cache could potentially cause false positive stakes in the event of deep reorgs, so check without cache also
            return CheckKernel(pindexPrev, nBits, nTimeBlock, prevout, view);
        }
    }

    return false;
}

// Check kernel hash target and coinstake signature
bool CheckProofOfStake(CBlockIndex* pindexPrev, CValidationState& state, const CTransaction& tx, unsigned int nBits, uint32_t nTimeBlock, uint256& hashProofOfStake, uint256& targetProofOfStake, CCoinsViewCache& view)
{
    if (!pindexPrev)
        return false;

    if (!tx.IsCoinStake()) {
        return error("CheckProofOfStake() : called on non-coinstake %s", tx.GetHash().ToString());
    }

    // Kernel (input 0) must match the stake hash target (nBits)
    const CTxIn& txin = tx.vin[0];

    Coin coinPrev;
    if (!view.GetCoin(txin.prevout, coinPrev)) {
        return state.DoS(100, error("CheckProofOfStake() : Stake prevout does not exist %s", txin.prevout.hash.ToString()));
    }

    if (pindexPrev->nHeight + 1 - coinPrev.nHeight < COINSTAKE_MATURITY) {
        return state.DoS(100, error("CheckProofOfStake() : Stake prevout is not mature, expecting %i and only matured to %i", COINSTAKE_MATURITY, pindexPrev->nHeight + 1 - coinPrev.nHeight));
    }

    CBlockIndex* blockFrom = pindexPrev->GetAncestor(coinPrev.nHeight);
    if (!blockFrom) {
        return state.DoS(100, error("CheckProofOfStake() : Block at height %i for prevout can not be loaded", coinPrev.nHeight));
    }

    // Verify signature
    if (!VerifySignature(coinPrev, txin.prevout.hash, tx, 0, SCRIPT_VERIFY_NONE)) {
        return state.DoS(100, error("CheckProofOfStake() : VerifySignature failed on coinstake %s", tx.GetHash().ToString()));
    }

    if (!CheckStakeKernelHash(pindexPrev, nBits, coinPrev.out.nValue, txin.prevout, nTimeBlock, coinPrev.nTime)) {
        return state.DoS(1, error("CheckProofOfStake() : INFO: check kernel failed on coinstake %s, hashProof=%s", tx.GetHash().ToString(), hashProofOfStake.ToString())); // may occur during initial download or if behind on block chain sync
    }

    // Check offline stake script
    if (coinPrev.out.scriptPubKey.IsOfflineStaking()) {
        for (unsigned int i = 1; i < tx.vout.size(); i++) {
            if (tx.vout[i].scriptPubKey != coinPrev.out.scriptPubKey) {
                return state.DoS(100, error("CheckProofOfStake(): Coinstake output %d tried to move offline staking coins to a non authorised script", i));
            }
        }
    }

    return true;
}

